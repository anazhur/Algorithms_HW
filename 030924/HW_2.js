// Task 1

function task1(n) {
    if (n == 1) return;
    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= n; j++) {
            console.log("*");
            break;
        }
    }
}

// Временная сложность:
// Внешний цикл i выполняется n раз.
// Внутренний цикл j всегда выполняется один раз, потому что сразу же встречается break.
// Временная сложность: O(n).

// Task 2

function task2(n) {
    let a = 0;
    for (let i = Math.floor(n / 2); i <= n; i++) {
        for (let j = 2; j <= n; j *= 2) {
            a = a + n / 2;
        }
    }
}

// Временная сложность:
// Внешний цикл i выполняется примерно n/2 раз, то есть O(n).
// Внутренний цикл j выполняется логарифмически (log2(n)), так как j удваивается на каждом шаге.
// Общая временная сложность: O(n * log n).

// Task 3

function task3(n) {
    let a = 0;
    for (let i = 0; i < n; i++) {
        for (let j = n; j > i; j--) {
            a = a + i + j;
        }
    }
}

// Временная сложность:
// Внешний цикл i выполняется n раз.
// Внутренний цикл j выполняется от n до i+1, что дает арифметическую прогрессию по количеству операций.
// Общая временная сложность: O(n^2).

// Task 4

function task4(n) {
    let a = 0;
    let i = n;
    while (i > 0) {
        a = a + i;
        i = Math.floor(i / 2);
    }
}

// Временная сложность:
// Цикл делит i на 2 на каждом шаге, пока i не станет равным 0. Это выполняется за O(log n) итераций.
// Общая временная сложность: O(log n).